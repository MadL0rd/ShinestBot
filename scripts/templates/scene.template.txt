import { logger } from 'src/app/app.logger'
import { UserService } from 'src/business-logic/user/user.service'
import { ExtendedMessageContext } from 'src/utils/telegraf-middlewares/extended-message-context'
import { Markup } from 'telegraf'
import { SceneEntrance } from '../models/scene-entrance.interface'
import { SceneName } from '../models/scene-name.enum'
import { SceneUsagePermissionsValidator } from '../models/scene-usage-permissions-validator'
import { Scene } from '../models/scene.abstract'
import { SceneHandlerCompletion } from '../models/scene.interface'
import { InjectableSceneConstructor } from '../scene-factory/scene-injections-provider.service'

// =====================
// Scene data classes
// =====================
export class <# SceneName #>SceneEntranceDto implements SceneEntrance.Dto {
    readonly sceneName = '<# sceneName #>'
}
type SceneEnterDataType = <# SceneName #>SceneEntranceDto
type ISceneData = {}

// =====================
// Scene main class
// =====================

@InjectableSceneConstructor()
export class <# SceneName #>Scene extends Scene<ISceneData, SceneEnterDataType> {
    // =====================
    // Properties
    // =====================

    override readonly name: SceneName.Union = '<# sceneName #>'
    protected override get dataDefault(): ISceneData {
        return {} as ISceneData
    }
    protected override get permissionsValidator(): SceneUsagePermissionsValidator.IPermissionsValidator {
        return new SceneUsagePermissionsValidator.CanUseIfNotBanned()
    }

    constructor(protected override readonly userService: UserService) {
        super()
    }

    // =====================
    // Public methods
    // =====================

    override async handleEnterScene(data?: SceneEnterDataType): Promise<SceneHandlerCompletion> {
        await this.ddi.sendHtml('Hello from <# SceneName #>', super.keyboardMarkupWithAutoLayoutFor(['Hello']))

        return this.completion.inProgress({})
    }

    override async handleMessage(ctx: ExtendedMessageContext, dataRaw: object): Promise<SceneHandlerCompletion> {
        const message = ctx.message
        if (message.type !== 'text') return this.completion.canNotHandle({})

        switch (message.text) {
            case 'Hello':
                await this.ddi.sendHtml(`Echo:\n${message.text}`)
                await this.ddi.sendHtml(`Goodbye`, Markup.removeKeyboard())
                return this.completion.complete()
        }

        return this.completion.canNotHandle({})
    }

    // =====================
    // Private methods
    // =====================
}
